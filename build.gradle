import org.asciidoctor.gradle.AsciidoctorTask

buildscript {
    dependencies {
        classpath 'org.ysb33r.gradle:vfs-gradle-plugin:1.0'
        classpath 'commons-httpclient:commons-httpclient:3.1'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
    }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.3'
  id 'com.github.jruby-gradle.base' version '1.4.0'
}

apply plugin: 'com.github.jruby-gradle.base'
apply plugin: 'org.ysb33r.vfs'
apply plugin: 'java'
apply plugin: 'org.asciidoctor.convert'

version = '1.0.0-SNAPSHOT'

ext {
    revealjsVersion = '3.3.0'
    decktapeVersion = '1.0.0'
    asciidoctorBackendVersion = 'master'
    downloadDir = new File(buildDir,'download')
    templateDir = new File(downloadDir,'templates')
    revealjsDir   = new File(downloadDir,'reveal.js')
    decktapeDir   = new File(downloadDir,'decktape')
}

repositories {
    jcenter()
}

dependencies {
    gems 'rubygems:slim:3.0.8'
    gems 'rubygems:thread_safe:0.3.6'
    gems 'rubygems:asciidoctor-pdf:1.5.0.alpha.15'
}

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    println 'Detected OS: Linux. Setting projects variables accordingly.'
    ext.urlPhantomJS = 'https://github.com/astefanutti/decktape/releases/download/v1.0.0/phantomjs-linux-x86-64'
} else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    println 'Detected OS: MacOSX. Setting projects variables accordingly.'
    ext.urlPhantomJS = 'https://github.com/astefanutti/decktape/releases/download/v1.0.0/phantomjs-osx-cocoa-x86-64'
} else if (org.gradle.internal.os.OperatingSystem.current().isUnix()) {
    println 'Detected OS: Unix. Setting projects variables accordingly.'
    ext.urlPhantomJS = 'https://github.com/astefanutti/decktape/releases/download/v1.0.0/phantomjs-linux-x86-64'
} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    println 'Detected OS: Windows. Setting projects variables accordingly.'
    ext.urlPhantomJS = 'https://github.com/astefanutti/decktape/releases/download/v1.0.0/phantomjs-msvc2013-x86.exe'
} else {
    throw new RuntimeException('Unsupported OS')
}

task download {
    doLast {
        mkdir downloadDir
        vfs {
            cp "zip:https://github.com/asciidoctor/asciidoctor-reveal.js/archive/${asciidoctorBackendVersion}.zip!asciidoctor-reveal.js-${asciidoctorBackendVersion}",
            templateDir, recursive:true, overwrite:true
            cp "zip:https://github.com/hakimel/reveal.js/archive/${revealjsVersion}.zip!reveal.js-${revealjsVersion}",
            revealjsDir, recursive:true, overwrite:true
            cp "zip:https://github.com/astefanutti/decktape/archive/v${decktapeVersion}.zip!decktape-${decktapeVersion}",
            decktapeDir, recursive:true, overwrite:true
            exec {
              def urlForBinary
              workingDir decktapeDir
              commandLine 'curl', '-L', urlPhantomJS, '-o', 'phantomjs/phantomjs'
            }
            exec {
              workingDir decktapeDir
              commandLine 'chmod', '+x', 'phantomjs/phantomjs'
            }
        }
    }
}

download {
    description "Download extra revealjs resources"
    outputs.dir templateDir
    outputs.dir revealjsDir
}

asciidoctorj {
  version = '1.5.5'
}

tasks.withType(AsciidoctorTask) { docTask ->
    sources {
        include 'example-deck.adoc'
    }
    resources {
        from (sourceDir) {
            include 'images/**'
        }
        from (downloadDir) {
            include 'reveal.js/**'
        }
    }
    attributes \
        'build-gradle': file('build.gradle'),
        'sourcedir': project.sourceSets.main.java.srcDirs[0],
        'endpoint-url': 'http://example.org',
        'source-highlighter': 'coderay',
        'imagesdir': './images',
        'toc': 'left',
        'icons': 'font',
        'setanchors': '',
        'idprefix': 'slide-',
        'idseparator': '-',
        'docinfo1': '',
        'revealjs_transition': 'linear',
        'revealjs_history': 'true',
        'revealjs_slideNumber': 'true'
    options template_dirs: [new File(templateDir,'templates/slim').absolutePath]
}

task renderPDF(type: AsciidoctorTask) {
  backends = ['pdf']
}

task renderRevealJS(type: AsciidoctorTask) {
  backends = ['revealjs']
    attributes \
        'revealjs_theme': 'black'
}

task renderSlidePDF(type: AsciidoctorTask) {
  doLast {
    exec {
      def projectDirString = projectDir.toString()
      workingDir decktapeDir
      commandLine './phantomjs/phantomjs', 'decktape.js', 'file://'+projectDirString+'/build/asciidoc/revealjs/example-deck.html', projectDirString+'/build/asciidoc/pdf/example-slides.pdf'
    }
  }
}

renderSlidePDF.dependsOn renderRevealJS

task renderSlides(type: AsciidoctorTask) {
}

renderSlides.dependsOn jrubyPrepare
renderSlides.dependsOn download
renderSlides.dependsOn renderRevealJS
renderSlides.dependsOn renderSlidePDF
